const data = "59782619540402316074783022180346847593683757122943307667976220344797950034514416918778776585040527955353805734321825495534399127207245390950629733658814914072657145711801385002282630494752854444244301169223921275844497892361271504096167480707096198155369207586705067956112600088460634830206233130995298022405587358756907593027694240400890003211841796487770173357003673931768403098808243977129249867076581200289745279553289300165042557391962340424462139799923966162395369050372874851854914571896058891964384077773019120993386024960845623120768409036628948085303152029722788889436708810209513982988162590896085150414396795104755977641352501522955134675".split('').map(Number)
let phases= 100;
let pattern = [0,1,0,-1];
let input = [...data]
while(phases>0){
    let output = []
    for(let outputInt = 0; outputInt < data.length; outputInt++){
        let newInt = 0;
        for(let i=0;i<data.length;i++){
            i==0 ? mulInd = 1 :undefined;
            newInt += input[i] * getMul(mulInd,outputInt+1)
            mulInd++
        }
        newInt = Math.abs(newInt % 10)
        output.push(newInt)
    }
    input = output;
    phases == 1 ? console.log('PART ONE : ' + output.join('').substring(0,8)) : undefined
    phases--
}

function getMul(posM,etape){
    let L = 4 *  etape;
    posM = (posM%L)+1
    let quarter = L/4 
    return posM<=quarter || posM>(quarter*2)&&posM<=(quarter*3) ? 0 : posM>quarter&&posM<=(quarter*2) ? 1 : -1
 }